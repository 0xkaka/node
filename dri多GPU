#!/bin/bash

# 提示用户输入文件夹起始和结束索引
read -p "请输入需要启动的文件夹起始索引（例如 10）: " START_FOLDER
read -p "请输入需要启动的文件夹结束索引（例如 11）: " END_FOLDER

# 检查索引是否有效
if [ "$START_FOLDER" -ge "$END_FOLDER" ]; then
  echo "起始索引必须小于结束索引。"
  exit 1
fi

# 计算需要的文件夹数量
NUM_FOLDERS=$((END_FOLDER - START_FOLDER + 1))
echo "需要创建的文件夹数量是 $NUM_FOLDERS"

# 私钥文件路径
PRIVATE_KEYS_FILE="/root/keys.txt"

# 检查私钥文件是否存在
if [ ! -f "$PRIVATE_KEYS_FILE" ]; then
  echo "私钥文件 $PRIVATE_KEYS_FILE 不存在，请检查文件路径。"
  exit 1
fi

# 读取私钥并保存到数组
mapfile -t PRIVATE_KEYS < "$PRIVATE_KEYS_FILE"

# 打印读取到的私钥数量和内容进行调试
echo "私钥文件中总共有 ${#PRIVATE_KEYS[@]} 个私钥，内容如下："
for i in "${!PRIVATE_KEYS[@]}"; do
  echo "私钥 $i: ${PRIVATE_KEYS[$i]}"
done

# 检查私钥文件的行数是否足够
if [ ${#PRIVATE_KEYS[@]} -lt $NUM_FOLDERS ]; then
  echo "私钥文件中的私钥数量不足，至少需要 $NUM_FOLDERS 个私钥。"
  exit 1
fi

# 提示用户选择 GPU
read -p "请输入要使用的 GPU（例如 0 表示 GPU0, 1 表示 GPU1, 等等）: " GPU_CHOICE
export CUDA_VISIBLE_DEVICES=$GPU_CHOICE
echo "已选择 GPU$GPU_CHOICE."

# 循环创建文件夹并更新配置
for ((i=0; i<$NUM_FOLDERS; i++)); do
  # 计算文件夹名称和端口号
  FOLDER_NAME=$((START_FOLDER + i))
  PORT_NUMBER=$((FOLDER_NAME + 3000))  # 根据索引号计算端口号，索引号 + 3000
  PRIVATE_KEY=${PRIVATE_KEYS[$((START_FOLDER + i - 1))]}  # 获取对应索引的私钥（注意索引偏移）

  echo "为文件夹 $FOLDER_NAME 计算的端口号是 $PORT_NUMBER"

  # 检查端口是否已被占用，如果占用则递增端口号
  while lsof -i :$PORT_NUMBER &>/dev/null; do
    echo "端口 $PORT_NUMBER 已被占用，正在尝试使用端口 $((PORT_NUMBER + 1))"
    PORT_NUMBER=$((PORT_NUMBER + 1))
  done

  # 目标文件夹路径
  TARGET_FOLDER="/root/$FOLDER_NAME"

  # 如果文件夹已存在，则删除并重新创建
  if [ -d "$TARGET_FOLDER" ]; then
    echo "目标文件夹 $FOLDER_NAME 已存在，正在删除并重新创建..."
    rm -rf "$TARGET_FOLDER"
  fi

  # 复制文件夹及其内容
  cp -r "/root/dkn-compute-node" "$TARGET_FOLDER"

  # 修改 .env 文件中的 DKN_P2P_LISTEN_ADDR 配置
  sed -i "s|DKN_P2P_LISTEN_ADDR=/ip4/0.0.0.0/tcp/[0-9]*|DKN_P2P_LISTEN_ADDR=/ip4/0.0.0.0/tcp/$PORT_NUMBER|" "$TARGET_FOLDER/.env"

  # 更新 .env 文件中的 DKN_WALLET_SECRET_KEY
  sed -i "s|DKN_WALLET_SECRET_KEY=.*|DKN_WALLET_SECRET_KEY=$PRIVATE_KEY|" "$TARGET_FOLDER/.env"

  # 提示用户
  echo "文件夹 $FOLDER_NAME 复制完成，端口号设置为 $PORT_NUMBER，私钥已设置。"

  # 创建并进入新的 screen 会话，并执行 dkn-compute-launcher，同时设置 GPU
  echo "正在创建并进入新的 screen 会话..."
  screen -S "$FOLDER_NAME" -dm bash -c "export CUDA_VISIBLE_DEVICES=$GPU_CHOICE && cd $TARGET_FOLDER && echo -e '\n' | ./dkn-compute-launcher"

  # 提示用户
  echo "新的 screen 会话 '$FOLDER_NAME' 已创建并已进入，且 ./dkn-compute-launcher 已自动启动。"
done

# 脚本继续运行，直到用户按 Enter 键退出，并自动连接到第一个 screen 会话
read -p "按 Enter 键进入第一个 screen 会话 '$START_FOLDER'..."

# 切换到第一个 screen 会话
screen -r "$START_FOLDER"

# 退出脚本
exit 0
